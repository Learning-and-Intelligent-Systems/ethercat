/* Auto-generated by genmsg_cpp for file /home/redheli/ros_workspace/ethercat_trunk/ethercat_hardware/srv/SoftProcessorReset.srv */
#ifndef ETHERCAT_HARDWARE_SERVICE_SOFTPROCESSORRESET_H
#define ETHERCAT_HARDWARE_SERVICE_SOFTPROCESSORRESET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ethercat_hardware
{
template <class ContainerAllocator>
struct SoftProcessorResetRequest_ {
  typedef SoftProcessorResetRequest_<ContainerAllocator> Type;

  SoftProcessorResetRequest_()
  : actuator_name()
  , processor_name()
  {
  }

  SoftProcessorResetRequest_(const ContainerAllocator& _alloc)
  : actuator_name(_alloc)
  , processor_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _actuator_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  actuator_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _processor_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  processor_name;


  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SoftProcessorResetRequest
typedef  ::ethercat_hardware::SoftProcessorResetRequest_<std::allocator<void> > SoftProcessorResetRequest;

typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetRequest> SoftProcessorResetRequestPtr;
typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetRequest const> SoftProcessorResetRequestConstPtr;



template <class ContainerAllocator>
struct SoftProcessorResetResponse_ {
  typedef SoftProcessorResetResponse_<ContainerAllocator> Type;

  SoftProcessorResetResponse_()
  : success(false)
  , error_msg()
  {
  }

  SoftProcessorResetResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , error_msg(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  error_msg;


  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SoftProcessorResetResponse
typedef  ::ethercat_hardware::SoftProcessorResetResponse_<std::allocator<void> > SoftProcessorResetResponse;

typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetResponse> SoftProcessorResetResponsePtr;
typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorResetResponse const> SoftProcessorResetResponseConstPtr;


struct SoftProcessorReset
{

typedef SoftProcessorResetRequest Request;
typedef SoftProcessorResetResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SoftProcessorReset
} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "777be25d71e9e85e62fa14223ffddb6b";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x777be25d71e9e85eULL;
  static const uint64_t static_value2 = 0x62fa14223ffddb6bULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorResetRequest";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string actuator_name\n\
string processor_name\n\
\n\
\n\
";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d006c48be24db1173a071ca9af4c8179";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd006c48be24db117ULL;
  static const uint64_t static_value2 = 0x3a071ca9af4c8179ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorResetResponse";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string error_msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.actuator_name);
    stream.next(m.processor_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SoftProcessorResetRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.error_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SoftProcessorResetResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ethercat_hardware::SoftProcessorReset> {
  static const char* value() 
  {
    return "338c1a9d2fcf7479cddb1ea63dbc8af9";
  }

  static const char* value(const ethercat_hardware::SoftProcessorReset&) { return value(); } 
};

template<>
struct DataType<ethercat_hardware::SoftProcessorReset> {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorReset";
  }

  static const char* value(const ethercat_hardware::SoftProcessorReset&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "338c1a9d2fcf7479cddb1ea63dbc8af9";
  }

  static const char* value(const ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorReset";
  }

  static const char* value(const ethercat_hardware::SoftProcessorResetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "338c1a9d2fcf7479cddb1ea63dbc8af9";
  }

  static const char* value(const ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorReset";
  }

  static const char* value(const ethercat_hardware::SoftProcessorResetResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ETHERCAT_HARDWARE_SERVICE_SOFTPROCESSORRESET_H

