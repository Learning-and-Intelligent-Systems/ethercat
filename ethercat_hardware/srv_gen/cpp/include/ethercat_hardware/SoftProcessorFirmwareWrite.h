/* Auto-generated by genmsg_cpp for file /home/redheli/ros_workspace/ethercat_trunk/ethercat_hardware/srv/SoftProcessorFirmwareWrite.srv */
#ifndef ETHERCAT_HARDWARE_SERVICE_SOFTPROCESSORFIRMWAREWRITE_H
#define ETHERCAT_HARDWARE_SERVICE_SOFTPROCESSORFIRMWAREWRITE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ethercat_hardware
{
template <class ContainerAllocator>
struct SoftProcessorFirmwareWriteRequest_ {
  typedef SoftProcessorFirmwareWriteRequest_<ContainerAllocator> Type;

  SoftProcessorFirmwareWriteRequest_()
  : actuator_name()
  , processor_name()
  , instructions()
  {
  }

  SoftProcessorFirmwareWriteRequest_(const ContainerAllocator& _alloc)
  : actuator_name(_alloc)
  , processor_name(_alloc)
  , instructions(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _actuator_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  actuator_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _processor_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  processor_name;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _instructions_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  instructions;


  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SoftProcessorFirmwareWriteRequest
typedef  ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<std::allocator<void> > SoftProcessorFirmwareWriteRequest;

typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest> SoftProcessorFirmwareWriteRequestPtr;
typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest const> SoftProcessorFirmwareWriteRequestConstPtr;



template <class ContainerAllocator>
struct SoftProcessorFirmwareWriteResponse_ {
  typedef SoftProcessorFirmwareWriteResponse_<ContainerAllocator> Type;

  SoftProcessorFirmwareWriteResponse_()
  : success(false)
  , error_msg()
  {
  }

  SoftProcessorFirmwareWriteResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , error_msg(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  error_msg;


  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SoftProcessorFirmwareWriteResponse
typedef  ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<std::allocator<void> > SoftProcessorFirmwareWriteResponse;

typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse> SoftProcessorFirmwareWriteResponsePtr;
typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse const> SoftProcessorFirmwareWriteResponseConstPtr;


struct SoftProcessorFirmwareWrite
{

typedef SoftProcessorFirmwareWriteRequest Request;
typedef SoftProcessorFirmwareWriteResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SoftProcessorFirmwareWrite
} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5234f035d5f911e880df479ac901a6e0";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5234f035d5f911e8ULL;
  static const uint64_t static_value2 = 0x80df479ac901a6e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorFirmwareWriteRequest";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string actuator_name\n\
string processor_name\n\
\n\
uint32[] instructions\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d006c48be24db1173a071ca9af4c8179";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd006c48be24db117ULL;
  static const uint64_t static_value2 = 0x3a071ca9af4c8179ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorFirmwareWriteResponse";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string error_msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.actuator_name);
    stream.next(m.processor_name);
    stream.next(m.instructions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SoftProcessorFirmwareWriteRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.error_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SoftProcessorFirmwareWriteResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ethercat_hardware::SoftProcessorFirmwareWrite> {
  static const char* value() 
  {
    return "4505835b16c43769db7131458325563c";
  }

  static const char* value(const ethercat_hardware::SoftProcessorFirmwareWrite&) { return value(); } 
};

template<>
struct DataType<ethercat_hardware::SoftProcessorFirmwareWrite> {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorFirmwareWrite";
  }

  static const char* value(const ethercat_hardware::SoftProcessorFirmwareWrite&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4505835b16c43769db7131458325563c";
  }

  static const char* value(const ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorFirmwareWrite";
  }

  static const char* value(const ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4505835b16c43769db7131458325563c";
  }

  static const char* value(const ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/SoftProcessorFirmwareWrite";
  }

  static const char* value(const ethercat_hardware::SoftProcessorFirmwareWriteResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ETHERCAT_HARDWARE_SERVICE_SOFTPROCESSORFIRMWAREWRITE_H

