/* Auto-generated by genmsg_cpp for file /home/redheli/ros_workspace/ethercat_trunk/ethercat_hardware/msg/MotorTemperature.msg */
#ifndef ETHERCAT_HARDWARE_MESSAGE_MOTORTEMPERATURE_H
#define ETHERCAT_HARDWARE_MESSAGE_MOTORTEMPERATURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct MotorTemperature_ {
  typedef MotorTemperature_<ContainerAllocator> Type;

  MotorTemperature_()
  : stamp()
  , winding_temperature(0.0)
  , housing_temperature(0.0)
  , ambient_temperature(0.0)
  , heating_power(0.0)
  {
  }

  MotorTemperature_(const ContainerAllocator& _alloc)
  : stamp()
  , winding_temperature(0.0)
  , housing_temperature(0.0)
  , ambient_temperature(0.0)
  , heating_power(0.0)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef double _winding_temperature_type;
  double winding_temperature;

  typedef double _housing_temperature_type;
  double housing_temperature;

  typedef double _ambient_temperature_type;
  double ambient_temperature;

  typedef double _heating_power_type;
  double heating_power;


  typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorTemperature
typedef  ::ethercat_hardware::MotorTemperature_<std::allocator<void> > MotorTemperature;

typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature> MotorTemperaturePtr;
typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature const> MotorTemperatureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ethercat_hardware::MotorTemperature_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ethercat_hardware::MotorTemperature_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8c7239cd096d6f25b75bff6b63f2162";
  }

  static const char* value(const  ::ethercat_hardware::MotorTemperature_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd8c7239cd096d6f2ULL;
  static const uint64_t static_value2 = 0x5b75bff6b63f2162ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ethercat_hardware/MotorTemperature";
  }

  static const char* value(const  ::ethercat_hardware::MotorTemperature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Sample of motor heating information\n\
time    stamp\n\
float64 winding_temperature\n\
float64 housing_temperature\n\
float64 ambient_temperature\n\
float64 heating_power\n\
";
  }

  static const char* value(const  ::ethercat_hardware::MotorTemperature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.winding_temperature);
    stream.next(m.housing_temperature);
    stream.next(m.ambient_temperature);
    stream.next(m.heating_power);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorTemperature_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ethercat_hardware::MotorTemperature_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "winding_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.winding_temperature);
    s << indent << "housing_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.housing_temperature);
    s << indent << "ambient_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.ambient_temperature);
    s << indent << "heating_power: ";
    Printer<double>::stream(s, indent + "  ", v.heating_power);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_MOTORTEMPERATURE_H

